(ql:quickload :clgplot)

(in-package :cl-random-forest)

;; http://scikit-learn.org/stable/auto_examples/tree/plot_tree_regression_multioutput.html#sphx-glr-auto-examples-tree-plot-tree-regression-multioutput-py

(defparameter *target*
  (make-array
   '(100 2)
   :element-type 'double-float
   :initial-contents
   '((1.825697660446167d0 2.6449015140533447d0)
     (2.806943416595459d0 1.410912275314331d0)
     (-2.7204322814941406d0 -1.571258306503296d0)
     (-2.9937238693237305d0 -0.9524816274642944d0)
     (-0.8521880507469177d0 3.0238022804260254d0)
     (2.389028310775757d0 -1.3300710916519165d0)
     (-2.79534912109375d0 -1.4337462186813354d0)
     (-3.0739433765411377d0 0.6484411954879761d0)
     (-3.035156011581421d0 0.8108224272727966d0)
     (0.4667646884918213d0 3.106724262237549d0)
     (2.657323122024536d0 0.5622915029525757d0)
     (2.6321234703063965d0 -1.715088963508606d0)
     (2.286179304122925d0 -2.154759407043457d0)
     (-3.131091594696045d0 -0.25665006041526794d0)
     (3.0979604721069336d0 0.5217714905738831d0)
     (1.2566356658935547d0 -3.474583387374878d0)
     (-0.35081252455711365d0 -3.1219441890716553d0)
     (-1.02994704246521d0 -2.9679646492004395d0)
     (-3.140029191970825d0 0.09909982234239578d0)
     (-3.1394410133361816d0 0.11625280976295471d0)
     (2.374924898147583d0 -2.310100555419922d0)
     (0.18985748291015625d0 -3.135850429534912d0)
     (0.2632559537887573d0 3.1305432319641113d0)
     (1.9983876943588257d0 -2.4240567684173584d0)
     (-1.7235342264175415d0 -2.626601219177246d0)
     (-2.50785756111145d0 1.7154351472854614d0)
     (-2.280761241912842d0 -2.1604936122894287d0)
     (-0.7260634303092957d0 -3.056540012359619d0)
     (-2.8131771087646484d0 -1.3984416723251343d0)
     (0.22316518425941467d0 3.1336562633514404d0)
     (2.7072417736053467d0 -0.0918096974492073d0)
     (1.32807457447052d0 -2.8470726013183594d0)
     (-3.033095121383667d0 -0.818497896194458d0)
     (1.176788568496704d0 2.912863254547119d0)
     (2.258533477783203d0 2.1837193965911865d0)
     (2.0169506072998047d0 2.4581823348999023d0)
     (2.589852809906006d0 1.7782763242721558d0)
     (2.923044204711914d0 1.1512677669525146d0)
     (-3.061595916748047d0 -0.7044395208358765d0)
     (-3.1385133266448975d0 -0.13906538486480713d0)
     (1.188246488571167d0 2.3680121898651123d0)
     (3.128889799118042d0 -0.2822277545928955d0)
     (3.120980739593506d0 -0.35928112268447876d0)
     (2.436561107635498d0 -1.9831222295761108d0)
     (2.3205602169036865d0 -2.1176884174346924d0)
     (1.1638182401657104d0 -2.44881272315979d0)
     (0.22133561968803406d0 -3.1337859630584717d0)
     (-3.0480844974517822d0 -0.7607790231704712d0)
     (2.6376307010650635d0 -1.706607460975647d0)
     (1.7551500797271729d0 -2.605581045150757d0)
     (-2.640876054763794d0 0.11463797837495804d0)
     (0.5122026205062866d0 -3.0995569229125977d0)
     (1.0768665075302124d0 2.9512646198272705d0)
     (2.4532511234283447d0 1.9624379873275757d0)
     (3.1286978721618652d0 0.2843480408191681d0)
     (-1.8432015180587769d0 2.377668857574463d0)
     (2.595118284225464d0 -1.7705832719802856d0)
     (2.430215358734131d0 -1.9908936023712158d0)
     (0.09436047822237015d0 -3.1401753425598145d0)
     (-3.1399593353271484d0 0.10129410773515701d0)
     (-2.9838035106658936d0 1.6890016794204712d0)
     (-3.113863468170166d0 -0.4164833128452301d0)
     (-2.2395801544189453d0 2.203153371810913d0)
     (-1.2184723615646362d0 2.895674228668213d0)
     (3.0027382373809814d0 0.9236708283424377d0)
     (3.0076138973236084d0 0.36743149161338806d0)
     (1.4060012102127075d0 -2.8094065189361572d0)
     (-2.93886661529541d0 -1.1102558374404907d0)
     (-1.9142577648162842d0 2.491028308868408d0)
     (-1.220286250114441d0 2.8949103355407715d0)
     (2.3422131538391113d0 2.6709039211273193d0)
     (2.1766011714935303d0 2.265394449234009d0)
     (2.905834913253784d0 1.1940386295318604d0)
     (2.439328670501709d0 -1.9797171354293823d0)
     (0.2592054009437561d0 3.1308810710906982d0)
     (2.8615825176239014d0 0.6179612278938293d0)
     (-1.8568172454833984d0 2.5341339111328125d0)
     (-0.7364447116851807d0 3.0540552139282227d0)
     (-0.3232054114341736d0 3.124922752380371d0)
     (-0.2416500449180603d0 3.1322851181030273d0)
     (2.9720475673675537d0 1.2999145984649658d0)
     (-1.3909119367599487d0 -2.8169076442718506d0)
     (-3.067779302597046d0 0.6770045161247253d0)
     (-2.558502435684204d0 -1.8230935335159302d0)
     (-0.37731343507766724d0 3.118852138519287d0)
     (0.4010838270187378d0 3.329246759414673d0)
     (0.7170597910881042d0 3.0586647987365723d0)
     (2.993943691253662d0 0.9517909288406372d0)
     (-1.1697036027908325d0 -2.9157156944274902d0)
     (-1.869655728340149d0 -2.524676561355591d0)
     (-2.959968090057373d0 1.794970989227295d0)
     (-2.645299196243286d0 1.6946967840194702d0)
     (0.11838369816541672d0 3.1393613815307617d0)
     (-1.9722695350646973d0 -2.4453542232513428d0)
     (2.5633578300476074d0 1.8162603378295898d0)
     (2.57393217086792d0 -1.3610565662384033d0)
     (-1.427597165107727d0 -2.798494338989258d0)
     (-3.009488582611084d0 0.901434063911438d0)
     (-1.7620984315872192d0 2.6008870601654053d0)
     (-1.1735780239105225d0 -2.914158344268799d0))))

(defparameter *datamatrix*
  (make-array
   '(100 1) 
   :element-type 'double-float
   :initial-contents
   '((-99.97712707519531d0) (-99.42593383789063d0) (-96.34234619140625d0)
     (-96.1266098022461d0) (-94.5224838256836d0) (-92.18904113769531d0)
     (-90.00930786132813d0) (-89.3274917602539d0) (-82.99115753173828d0)
     (-81.53227996826172d0) (-80.33063507080078d0) (-79.53311157226563d0)
     (-79.35479736328125d0) (-77.0508041381836d0) (-73.9942855834961d0)
     (-72.50505828857422d0) (-72.14472961425781d0) (-71.92261505126953d0)
     (-70.65428161621094d0) (-70.64881896972656d0) (-66.92916107177734d0)
     (-66.0339126586914d0) (-62.74795913696289d0) (-60.379703521728516d0)
     (-59.10955047607422d0) (-57.67437744140625d0) (-52.5946044921875d0)
     (-46.89066696166992d0) (-46.01442337036133d0) (-43.91120147705078d0)
     (-42.44493103027344d0) (-41.27717208862305d0) (-39.533485412597656d0)
     (-37.315162658691406d0) (-36.896873474121094d0) (-30.887855529785156d0)
     (-30.446828842163086d0) (-30.2203311920166d0) (-20.64650535583496d0)
     (-20.464632034301758d0) (-18.372638702392578d0) (-17.18880271911621d0)
     (-17.164146423339844d0) (-16.595598220825195d0) (-16.539039611816406d0)
     (-16.161096572875977d0) (-15.778474807739258d0) (-14.381762504577637d0)
     (-10.421295166015625d0) (-10.017573356628418d0) (-1.6853681802749634d0)
     (2.9778223037719727d0) (6.633057117462158d0) (7.179281234741211d0)
     (7.7633466720581055d0) (11.73796558380127d0) (14.735897064208984d0)
     (14.82352066040039d0) (15.677923202514648d0) (17.31100845336914d0)
     (17.861106872558594d0) (23.42898178100586d0) (24.339143753051758d0)
     (24.73444175720215d0) (32.68830108642578d0) (32.75893020629883d0)
     (34.093502044677734d0) (35.76710510253906d0) (37.04389953613281d0)
     (37.30018615722656d0) (38.375423431396484d0) (38.46452331542969d0)
     (38.88003158569336d0) (39.9516716003418d0) (44.06489944458008d0)
     (45.1995964050293d0) (49.63312911987305d0) (50.02886199951172d0)
     (50.16242218017578d0) (50.1884880065918d0) (57.855865478515625d0)
     (60.1489143371582d0) (61.47825622558594d0) (66.92513275146484d0)
     (75.27783203125d0) (75.62348937988281d0) (75.62850189208984d0)
     (76.66121673583984d0) (78.92133331298828d0) (79.17724609375d0)
     (80.6759033203125d0) (80.68038177490234d0) (81.71910095214844d0)
     (85.50171661376953d0) (88.91895294189453d0) (89.8978500366211d0)
     (91.5779037475586d0) (92.96800994873047d0) (93.65231323242188d0)
     (97.772216796875d0))))

(defparameter *rtree* (make-rtree *datamatrix* *target* :max-depth 10))

(defparameter *rforest* (make-regression-forest *datamatrix* *target*
                                                :n-tree 100 :bagging-ratio 0.6 :max-depth 8
                                                ))

(let ((predict-result
        (loop for i from 0 below 100
              collect (let ((predict-arr (predict-rtree rtree8 *datamatrix* i)))
                        (list (aref predict-arr 0)
                              (aref predict-arr 1)))))
      (predict-result-forest
        (loop for i from 0 below 100
              collect (let ((predict-arr (predict-regression-forest *rforest* *datamatrix* i)))
                        (list (aref predict-arr 0)
                              (aref predict-arr 1))))))
  (clgp:plots (list (loop for i from 0 below 100 collect (aref *target* i 1))
                    (mapcar #'cadr predict-result)
                    (mapcar #'cadr predict-result-forest))
              :x-seqs (list (loop for i from 0 below 100 collect (aref *target* i 0))
                            (mapcar #'car predict-result)
                            (mapcar #'car predict-result-forest))
              :style 'points
              :title-list '("training data"
                            "rtree, max-depth=8"
                            "forest, ntree=100, bagging-ratio=0.6, max-depth=8")
              :x-label "target1"
              :y-label "target2"
              ;; :output "/home/wiz/tmp/multivariate-regression-forest.png"
              ))

(defparameter rtree2 (make-rtree *datamatrix* *target* :max-depth 2))
(defparameter rtree5 (make-rtree *datamatrix* *target* :max-depth 5))
(defparameter rtree8 (make-rtree *datamatrix* *target* :max-depth 8))

(let ((predict-result2
        (loop for i from 0 below 100
              collect (let ((predict-arr (predict-rtree rtree2 *datamatrix* i)))
                        (list (aref predict-arr 0)
                              (aref predict-arr 1)))))
      (predict-result5
        (loop for i from 0 below 100
              collect (let ((predict-arr (predict-rtree rtree5 *datamatrix* i)))
                        (list (aref predict-arr 0)
                              (aref predict-arr 1)))))
      (predict-result8
        (loop for i from 0 below 100
              collect (let ((predict-arr (predict-rtree rtree8 *datamatrix* i)))
                        (list (aref predict-arr 0)
                              (aref predict-arr 1))))))
  (clgp:plots (list (loop for i from 0 below 100 collect (aref *target* i 1))
                    (mapcar #'cadr predict-result2)
                    (mapcar #'cadr predict-result5)
                    (mapcar #'cadr predict-result8))
              :x-seqs (list (loop for i from 0 below 100 collect (aref *target* i 0))
                            (mapcar #'car predict-result2)
                            (mapcar #'car predict-result5)
                            (mapcar #'car predict-result8))
              :style 'points
              :title-list '("training data" "max-depth=2" "max-depth=5" "max-depth=8")
              :x-label "target1"
              :y-label "target2"
              ;; :output "/home/wiz/tmp/multivariate-regression-tree.png"
              ))

;;; random-forest prediction (scikit-learn)

(defparameter sklearn-forest-result
  '((0.7289032 1.0717345) (0.82702774 0.9483356) (-2.4014418 -0.5284909)
    (-2.5654168 -0.15722486) (-1.1724547 2.0834162) (0.8119501 -0.6251606)
    (-2.8789275 -0.80909) (-2.9877794 0.034610372) (-2.3360648 1.26459)
    (0.9515774 1.6886523) (2.6135845 0.1638448) (2.526756 -1.5182556)
    (2.4229727 -1.6501567) (-1.4949697 -0.8226002) (0.94985735 -1.1009191)
    (0.22671364 -2.6517203) (-0.5093428 -2.3146508) (-0.57725626 -2.2992527)
    (-1.4585625 -1.5898029) (-1.4584448 -1.5863724) (0.6087989 -2.0040593)
    (0.40670547 -2.0994205) (-0.11823498 0.7720284) (0.5758177 -1.4498116)
    (-0.8427673 -1.7177513) (-1.6367718 0.2439758) (-2.0295708 -1.2334286)
    (-0.68034524 -2.5625355) (-1.5151907 -1.8992963) (0.12123797 1.9246727)
    (1.391077 0.21409701) (1.2319919 -0.15508342) (-0.5872101 -0.010348232)
    (1.320033 2.49365) (1.6543247 2.255178) (2.0104694 2.0393074)
    (2.3754508 1.582386) (2.442089 1.4569844) (-0.7575744 -0.39221317)
    (-0.7883413 -0.16606352) (1.5252546 0.11589393) (2.3749714 -0.73300785)
    (2.3733897 -0.7484185) (1.7083505 -1.7190382) (1.6851504 -1.7459515)
    (1.0617477 -2.0035748) (0.7790029 -2.2090669) (-0.8077399 -1.158289)
    (1.0588957 -1.2101064) (1.0588957 -1.2101064) (-0.7053122 -1.0302154)
    (-0.07469649 -1.6730543) (1.2354157 1.0545336) (1.5106926 0.8567683)
    (1.645782 0.52115035) (0.88806707 0.3261076) (1.7343343 -1.9365507)
    (1.6683732 -2.024675) (1.4230263 -2.286068) (-2.0048494 -0.34993556)
    (-1.9736183 -0.032394033) (-2.838312 0.43895718) (-2.1095204 2.1492434)
    (-1.9052988 2.2877476) (2.6563642 0.7486524) (2.6573393 0.6374045)
    (1.8579957 -1.1178863) (-1.4551415 -0.0017878162) (-0.6540595 2.2799752)
    (-0.44586807 2.4011397) (2.4581609 2.2691467) (2.4250386 2.1880448)
    (2.675329 1.6581252) (2.5063572 -0.92045486) (1.171185 1.9497093)
    (1.6251935 1.4660368) (-1.5298327 2.4569364) (-0.6381844 2.8389664)
    (-0.38412416 2.882039) (-0.3678131 2.8835115) (-0.092468865 0.23191732)
    (-1.5690434 -0.65373814) (-1.9044169 0.045044303) (-2.304689 -1.017286)
    (0.03904224 3.1177871) (0.49143606 3.168868) (0.55463123 3.1147516)
    (1.2534952 2.4691603) (-1.7078179 -1.5234771) (-1.9877988 -1.3670615)
    (-2.526597 1.3210231) (-2.4321961 1.2909408) (-0.98742104 1.9932183)
    (-0.7103512 -0.74283737) (1.209997 0.16636336) (1.2142267 -1.1045634)
    (-0.944727 -1.4532894) (-1.6443838 1.1065582) (-1.5191213 1.3132976)
    (-1.1589742 -0.7227753)))

(clgp:plots (list (loop for i from 0 below 100 collect (aref *target* i 1))
                  (mapcar #'cadr sklearn-forest-result)
                  )
            :x-seqs (list (loop for i from 0 below 100 collect (aref *target* i 0))
                          (mapcar #'car sklearn-forest-result)
                          )
            :style 'points
            :title-list '("training data" "sklearn")
            :x-label "target1"
            :y-label "target2"
            ;:output "/home/wiz/tmp/multivariate-regression-tree.png"
            )
